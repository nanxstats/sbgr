% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/99-easy-api.R
\docType{class}
\name{Auth-class}
\alias{Auth}
\alias{Auth-class}
\title{Class Auth}
\arguments{
\item{auth_token}{[character] your auth token.}

\item{api}{[character %in% 'sbg-us', 'cgc'] which api you are
using, by default it is sbg us platform.}

\item{url}{[chracter] a URL for the API, default is \code{NULL},
will use \code{api} parameter to switch to the right one.}

\item{version}{[character] default: 1.1 version used for api.}
}
\description{
Auth token object
}
\details{
Every object could be requested from this Auth object and any action
could start from this object using cascading style. Please check vignette
'easy-api' for more information.
}
\section{Fields}{

\describe{
\item{\code{auth_token}}{[character] your auth token.}

\item{\code{url}}{[character] basic url used for API, by default
it's \url{https://api.sbgenomics.com/1.1/}}
}}
\section{Methods}{

\describe{
\item{\code{project(name = NULL, id = NULL, index = NULL, ignore.case = TRUE,
  exact = TRUE)}}{find project}
}}
\examples{
## replace it with real token
token <- "aef7e9e3f6c54fb1b338ac4ecddf1a56"
a <- Auth(token)
\donttest{
## get billing info
b <- a$billing()
## create project
a$project_new(name = "API", description = "API tutorial",
              billing_group_id = b[[1]]$id)
p <- a$project("API")
## get data
fl <- system.file("extdata", "sample1.fastq", package = "sbgr")
## create meta data
fl.meta <- list(file_type = "fastq",
                seq_tech = "Illumina",
                sample = "sample1",
                author = "tengfei")
## upload data with metadata
p$upload(fl, metadata = fl.meta)
## check uploading success
f.file <- p$file(basename(fl))
## get the pipeline from public repos
f.pipe <- a$pipeline(pipeline_name = "FastQC")
## copy the pipeline to your project
p$pipeline_add(pipeline_name = f.pipe$name)
## get the pipeline from your project not public one
f.pipe <- p$pipeline(name = "FastQC")
## check the inputs needed for running tasks
f.pipe$details()
## Ready to run a task? go
f.task <- p$task_run(name = "my task",
                      description = "A text description",
                      pipeline_id = f.pipe$id,
                      inputs = list(
                          "177252" = list(f.file$id)
                          ))
f.task$run()
## or you can just run with Task constructor
f.task <- Task(auth = Auth(token),
               name = "my task",
               description = "A text description",
               pipeline_id = f.pipe$id,
               project_id = p$id,
               inputs = list(
                   "177252" = list(f.file$id)
                   ))
## Monitor you task
f.task$monitor(30)

## download a task output files
f.task <- p$task("my task")
f.task$download("~/Desktop/")

## Abort the task
f.task$abort()
}
}

