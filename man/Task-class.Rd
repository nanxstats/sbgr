% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/99-easy-api.R
\docType{class}
\name{Task-class}
\alias{Task-class}
\alias{Task}
\title{Task class}
\description{
Task class
}
\details{
A task execution require auth, project_id, pipeline_id and inputs
parameters, there are two ways to execute a task, the recommended
way is to use a cascading method to create a project object called
\code{p} then just call \code{p$task_run()} to pass your
parameters. This way you save your time passing auth and
project_id. The other way is to create a Task object with all
required fields and call \code{run} method. Please check example
in the end or tutorial for easy API.
}
\section{Fields}{

\describe{
\item{\code{id}}{[characterORNULL] The task ID number, used when referring to the
task in other Seven Bridges API calls}

\item{\code{name}}{[characterORNULL] Name of the task you wish to execute. If this
is not specified, the task will be named automatically.}

\item{\code{description}}{[characterORNULL] Description of the task you wish to execute.}

\item{\code{pipeline_id}}{[characterORNULL] ID of the pipeline you wish to execute.}

\item{\code{pipeline_revision}}{[characterORNULL] Revision number of the pipeline
you wish to execute. If this is not specified, the latest pipeline revision
is used.}

\item{\code{start_time}}{[numericORNULL] start time.}

\item{\code{status}}{[characterORNULL] 1) active: task is currently running.
2) completed: task has finished successfully. 3) aborted: task was aborted by
user. 4) failed: task has failed to finish due to either bad inputs and/or
parameters, or because of the internal infrastructure failures.}

\item{\code{message}}{[characterORNULL] task message}

\item{\code{jobs_completed}}{[numericORNULL] completed jobs}

\item{\code{jobs_total}}{[numericORNULL] total jobs.}

\item{\code{inputs}}{[listORNULL] required for task execution. List of key-value
pairs containing mappings of pipeline input node ID to file IDs.
 Note that you must supply an array of file IDs for each input nodes,
 even if the array is empty.}

\item{\code{parameters}}{[listORNULL] required for task execution. List of key-value
pairs containing mappings of node IDs to apps specific parameters. Note that
you must supply some value for parameters, even if this an empty list of
key-value pairs.}

\item{\code{project_id}}{[characterORNULL] required for task execution.
ID of the project you want to execute the task in.}
}}


\examples{
token <- "aef7e9e3f6c54fb1b338ac4ecddf1a56"
a <- Auth(token)
## A task constructor
Task(auth = Auth(token),
     name = "my task",
     description = "A text description",
     pipeline_id = "fake_pipeline_id",
     project_id = "fake_project_id",
     inputs = list("177252" = list("fake_id")))
\donttest{
## replace with real token then follow the examples here
## get billing info
b <- a$billing()
p <- a$project("API")
## get the pipeline from your project not public one
f.pipe <- p$pipeline(name = "FastQC")
## check the inputs needed for running tasks
f.pipe$details()
## Ready to run a task? go
f.task <- p$task_run(
  name = "my task",
  description = "A text description",
  pipeline_id = f.pipe$id,
  inputs = list("177252" = list(f.file$id)))
f.task$run()
## or you can just run with Task constructor
f.task <- Task(
  auth = Auth(token),
  name = "my task",
  description = "A text description",
  pipeline_id = f.pipe$id,
  project_id = p$id,
  inputs = list("177252" = list(f.file$id)))
## Monitor you task
f.task$monitor(30)

## download a task output files
f.task <- p$task("my task")
f.task$download("~/Desktop/")

## Abort the task
f.task$abort()
}
}
